{"ast":null,"code":"import _asyncToGenerator from\"/Users/jasonaviles/Desktop/facebook/starter/frontendssmedia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/jasonaviles/Desktop/facebook/starter/frontendssmedia/node_modules/@babel/runtime/regenerator/index.js\";export var createImage=function createImage(url){return new Promise(function(resolve,reject){var image=new Image();image.addEventListener(\"load\",function(){return resolve(image);});image.addEventListener(\"error\",function(error){return reject(error);});image.setAttribute(\"crossOrigin\",\"anonymous\");// needed to avoid cross-origin issues on CodeSandbox\nimage.src=url;});};export function getRadianAngle(degreeValue){return degreeValue*Math.PI/180;}/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */export function rotateSize(width,height,rotation){var rotRad=getRadianAngle(rotation);return{width:Math.abs(Math.cos(rotRad)*width)+Math.abs(Math.sin(rotRad)*height),height:Math.abs(Math.sin(rotRad)*width)+Math.abs(Math.cos(rotRad)*height)};}/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n */export default function getCroppedImg(_x,_x2){return _getCroppedImg.apply(this,arguments);}function _getCroppedImg(){_getCroppedImg=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(imageSrc,pixelCrop){var rotation,flip,image,canvas,ctx,rotRad,_rotateSize,bBoxWidth,bBoxHeight,data,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:rotation=_args.length>2&&_args[2]!==undefined?_args[2]:0;flip=_args.length>3&&_args[3]!==undefined?_args[3]:{horizontal:false,vertical:false};_context.next=4;return createImage(imageSrc);case 4:image=_context.sent;canvas=document.createElement(\"canvas\");ctx=canvas.getContext(\"2d\");if(ctx){_context.next=9;break;}return _context.abrupt(\"return\",null);case 9:rotRad=getRadianAngle(rotation);// calculate bounding box of the rotated image\n_rotateSize=rotateSize(image.width,image.height,rotation),bBoxWidth=_rotateSize.width,bBoxHeight=_rotateSize.height;// set canvas size to match the bounding box\ncanvas.width=bBoxWidth;canvas.height=bBoxHeight;// translate canvas context to a central location to allow rotating and flipping around the center\nctx.translate(bBoxWidth/2,bBoxHeight/2);ctx.rotate(rotRad);ctx.scale(flip.horizontal?-1:1,flip.vertical?-1:1);ctx.translate(-image.width/2,-image.height/2);// draw rotated image\nctx.drawImage(image,0,0);// croppedAreaPixels values are bounding box relative\n// extract the cropped image using these values\ndata=ctx.getImageData(pixelCrop.x,pixelCrop.y,pixelCrop.width,pixelCrop.height);// set canvas width to final desired crop size - this will clear existing context\ncanvas.width=pixelCrop.width;canvas.height=pixelCrop.height;// paste generated rotate image at the top left corner\nctx.putImageData(data,0,0);// As Base64 string\n// return canvas.toDataURL('image/jpeg');\n// As a blob\nreturn _context.abrupt(\"return\",new Promise(function(resolve,reject){canvas.toBlob(function(file){resolve(URL.createObjectURL(file));},\"image/jpeg\");}));case 23:case\"end\":return _context.stop();}}},_callee);}));return _getCroppedImg.apply(this,arguments);}","map":{"version":3,"sources":["/Users/jasonaviles/Desktop/facebook/starter/frontendssmedia/src/helpers/getCroppedImg.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","rotateSize","width","height","rotation","rotRad","abs","cos","sin","getCroppedImg","imageSrc","pixelCrop","flip","horizontal","vertical","canvas","document","createElement","ctx","getContext","bBoxWidth","bBoxHeight","translate","rotate","scale","drawImage","data","getImageData","x","y","putImageData","toBlob","file","URL","createObjectURL"],"mappings":"qSAAA,MAAO,IAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,GAAD,QACzB,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC/B,GAAMC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,KAAJ,EAAd,CACAD,KAAK,CAACE,gBAAN,CAAuB,MAAvB,CAA+B,iBAAMJ,CAAAA,OAAO,CAACE,KAAD,CAAb,EAA/B,EACAA,KAAK,CAACE,gBAAN,CAAuB,OAAvB,CAAgC,SAACC,KAAD,QAAWJ,CAAAA,MAAM,CAACI,KAAD,CAAjB,EAAhC,EACAH,KAAK,CAACI,YAAN,CAAmB,aAAnB,CAAkC,WAAlC,EAAgD;AAChDJ,KAAK,CAACK,GAAN,CAAYT,GAAZ,CACD,CAND,CADyB,EAApB,CASP,MAAO,SAASU,CAAAA,cAAT,CAAwBC,WAAxB,CAAqC,CAC1C,MAAQA,CAAAA,WAAW,CAAGC,IAAI,CAACC,EAApB,CAA0B,GAAjC,CACD,CAED;AACA;AACA,GACA,MAAO,SAASC,CAAAA,UAAT,CAAoBC,KAApB,CAA2BC,MAA3B,CAAmCC,QAAnC,CAA6C,CAClD,GAAMC,CAAAA,MAAM,CAAGR,cAAc,CAACO,QAAD,CAA7B,CAEA,MAAO,CACLF,KAAK,CACHH,IAAI,CAACO,GAAL,CAASP,IAAI,CAACQ,GAAL,CAASF,MAAT,EAAmBH,KAA5B,EAAqCH,IAAI,CAACO,GAAL,CAASP,IAAI,CAACS,GAAL,CAASH,MAAT,EAAmBF,MAA5B,CAFlC,CAGLA,MAAM,CACJJ,IAAI,CAACO,GAAL,CAASP,IAAI,CAACS,GAAL,CAASH,MAAT,EAAmBH,KAA5B,EAAqCH,IAAI,CAACO,GAAL,CAASP,IAAI,CAACQ,GAAL,CAASF,MAAT,EAAmBF,MAA5B,CAJlC,CAAP,CAMD,CAED;AACA;AACA,GACA,uBAA8BM,CAAAA,aAA9B,sD,iGAAe,iBACbC,QADa,CAEbC,SAFa,kNAGbP,QAHa,+CAGF,CAHE,CAIbQ,IAJa,+CAIN,CAAEC,UAAU,CAAE,KAAd,CAAqBC,QAAQ,CAAE,KAA/B,CAJM,uBAMO5B,CAAAA,WAAW,CAACwB,QAAD,CANlB,QAMPnB,KANO,eAOPwB,MAPO,CAOEC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAPF,CAQPC,GARO,CAQDH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CARC,IAURD,GAVQ,yDAWJ,IAXI,SAcPb,MAdO,CAcER,cAAc,CAACO,QAAD,CAdhB,CAgBb;AAhBa,YAiBoCH,UAAU,CACzDV,KAAK,CAACW,KADmD,CAEzDX,KAAK,CAACY,MAFmD,CAGzDC,QAHyD,CAjB9C,CAiBEgB,SAjBF,aAiBLlB,KAjBK,CAiBqBmB,UAjBrB,aAiBalB,MAjBb,CAuBb;AACAY,MAAM,CAACb,KAAP,CAAekB,SAAf,CACAL,MAAM,CAACZ,MAAP,CAAgBkB,UAAhB,CAEA;AACAH,GAAG,CAACI,SAAJ,CAAcF,SAAS,CAAG,CAA1B,CAA6BC,UAAU,CAAG,CAA1C,EACAH,GAAG,CAACK,MAAJ,CAAWlB,MAAX,EACAa,GAAG,CAACM,KAAJ,CAAUZ,IAAI,CAACC,UAAL,CAAkB,CAAC,CAAnB,CAAuB,CAAjC,CAAoCD,IAAI,CAACE,QAAL,CAAgB,CAAC,CAAjB,CAAqB,CAAzD,EACAI,GAAG,CAACI,SAAJ,CAAc,CAAC/B,KAAK,CAACW,KAAP,CAAe,CAA7B,CAAgC,CAACX,KAAK,CAACY,MAAP,CAAgB,CAAhD,EAEA;AACAe,GAAG,CAACO,SAAJ,CAAclC,KAAd,CAAqB,CAArB,CAAwB,CAAxB,EAEA;AACA;AACMmC,IAtCO,CAsCAR,GAAG,CAACS,YAAJ,CACXhB,SAAS,CAACiB,CADC,CAEXjB,SAAS,CAACkB,CAFC,CAGXlB,SAAS,CAACT,KAHC,CAIXS,SAAS,CAACR,MAJC,CAtCA,CA6Cb;AACAY,MAAM,CAACb,KAAP,CAAeS,SAAS,CAACT,KAAzB,CACAa,MAAM,CAACZ,MAAP,CAAgBQ,SAAS,CAACR,MAA1B,CAEA;AACAe,GAAG,CAACY,YAAJ,CAAiBJ,IAAjB,CAAuB,CAAvB,CAA0B,CAA1B,EAEA;AACA;AAEA;AAvDa,gCAwDN,GAAItC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCyB,MAAM,CAACgB,MAAP,CAAc,SAACC,IAAD,CAAU,CACtB3C,OAAO,CAAC4C,GAAG,CAACC,eAAJ,CAAoBF,IAApB,CAAD,CAAP,CACD,CAFD,CAEG,YAFH,EAGD,CAJM,CAxDM,yD","sourcesContent":["export const createImage = (url) =>\r\n  new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.addEventListener(\"load\", () => resolve(image));\r\n    image.addEventListener(\"error\", (error) => reject(error));\r\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\r\n    image.src = url;\r\n  });\r\n\r\nexport function getRadianAngle(degreeValue) {\r\n  return (degreeValue * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */\r\nexport function rotateSize(width, height, rotation) {\r\n  const rotRad = getRadianAngle(rotation);\r\n\r\n  return {\r\n    width:\r\n      Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\r\n    height:\r\n      Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\r\n  };\r\n}\r\n\r\n/**\r\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\r\n */\r\nexport default async function getCroppedImg(\r\n  imageSrc,\r\n  pixelCrop,\r\n  rotation = 0,\r\n  flip = { horizontal: false, vertical: false }\r\n) {\r\n  const image = await createImage(imageSrc);\r\n  const canvas = document.createElement(\"canvas\");\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  if (!ctx) {\r\n    return null;\r\n  }\r\n\r\n  const rotRad = getRadianAngle(rotation);\r\n\r\n  // calculate bounding box of the rotated image\r\n  const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\r\n    image.width,\r\n    image.height,\r\n    rotation\r\n  );\r\n\r\n  // set canvas size to match the bounding box\r\n  canvas.width = bBoxWidth;\r\n  canvas.height = bBoxHeight;\r\n\r\n  // translate canvas context to a central location to allow rotating and flipping around the center\r\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2);\r\n  ctx.rotate(rotRad);\r\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1);\r\n  ctx.translate(-image.width / 2, -image.height / 2);\r\n\r\n  // draw rotated image\r\n  ctx.drawImage(image, 0, 0);\r\n\r\n  // croppedAreaPixels values are bounding box relative\r\n  // extract the cropped image using these values\r\n  const data = ctx.getImageData(\r\n    pixelCrop.x,\r\n    pixelCrop.y,\r\n    pixelCrop.width,\r\n    pixelCrop.height\r\n  );\r\n\r\n  // set canvas width to final desired crop size - this will clear existing context\r\n  canvas.width = pixelCrop.width;\r\n  canvas.height = pixelCrop.height;\r\n\r\n  // paste generated rotate image at the top left corner\r\n  ctx.putImageData(data, 0, 0);\r\n\r\n  // As Base64 string\r\n  // return canvas.toDataURL('image/jpeg');\r\n\r\n  // As a blob\r\n  return new Promise((resolve, reject) => {\r\n    canvas.toBlob((file) => {\r\n      resolve(URL.createObjectURL(file));\r\n    }, \"image/jpeg\");\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}